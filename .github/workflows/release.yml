# This workflow builds the project and creates a GitHub release.
# It includes logic to sync with an upstream repository before building.

name: "Build and Release"

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out your repository's code
      # fetch-depth: 0 is crucial to get all git history for comparison with upstream.
      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Sync with the upstream repository.
      # This step checks for new commits in the upstream repo. If found, it merges them.
      # If not, it sets an output to skip the subsequent steps.
      - name: Sync with upstream and check for updates
        id: sync
        run: |
          git remote add upstream https://github.com/cedar2025/hysteria.git
          git fetch upstream
          
          # Dynamically get the default branch of the upstream repository (e.g., main, master)
          UPSTREAM_BRANCH=$(git remote show upstream | grep 'HEAD branch' | cut -d' ' -f5)
          echo "Upstream default branch is $UPSTREAM_BRANCH"

          # Count how many new commits exist on the upstream branch
          NEW_COMMITS=$(git rev-list HEAD..upstream/$UPSTREAM_BRANCH --count)
          
          if [ "$NEW_COMMITS" -eq 0 ]; then
            echo "No new commits from upstream. Halting workflow."
            echo "needs_build=false" >> $GITHUB_OUTPUT
          else
            echo "$NEW_COMMITS new commit(s) found from upstream. Merging and proceeding."
            echo "needs_build=true" >> $GITHUB_OUTPUT
            
            # Configure git user for the merge commit
            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'
            
            # Merge the changes from upstream into the current branch for this workflow run
            git merge "upstream/$UPSTREAM_BRANCH"
          fi

      # Step 3: Get the current date to use as the release tag.
      # This step only runs if the previous step determined a build is needed.
      - name: Get current date for tag
        if: steps.sync.outputs.needs_build == 'true'
        id: get_date
        run: echo "tag=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      # Step 4: Set up the Go environment.
      - name: Setup Go
        if: steps.sync.outputs.needs_build == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      # Step 5: Set up Python for the build script.
      - name: Setup Python
        if: steps.sync.outputs.needs_build == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Step 6: Set up Android NDK for mobile builds.
      - name: Setup Android NDK
        if: steps.sync.outputs.needs_build == 'true'
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r26b
          add-to-path: false

      # Step 7: Execute the build script.
      - name: Run build script
        if: steps.sync.outputs.needs_build == 'true'
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          # Read platforms from platforms.txt, remove comments/empty lines, and create a comma-separated list
          export HY_APP_PLATFORMS=$(sed 's/\r$//' platforms.txt | awk '!/^#/ && !/^$/' | paste -sd ",")
          python hyperbole.py build -r

      # Step 8: Generate SHA256 hashes for the build artifacts.
      - name: Generate hashes
        if: steps.sync.outputs.needs_build == 'true'
        run: |
          # Check if build directory exists and is not empty to prevent errors
          if [ -d "build" ] && [ "$(ls -A build)" ]; then
            cd build
            for file in *; do
              sha256sum "$file" >> hashes.txt
            done
            cd ..
          else
            echo "Build directory is empty or does not exist. Skipping hash generation."
          fi

      # Step 9: Create a new GitHub Release with the build artifacts.
      - name: Create Release
        if: steps.sync.outputs.needs_build == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_date.outputs.tag }}
          files: build/*
          # Automatically generate release notes from commits
          generate_release_notes: true
