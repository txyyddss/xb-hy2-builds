# This workflow builds the project and creates a new GitHub release.
# The release tag is automatically set to the current date (YYYY-MM-DD).

name: "Build and Release"

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch

jobs:
  build_and_release:
    name: Build and Release
    runs-on: ubuntu-latest
    
    # Define permissions for the GITHUB_TOKEN to allow creating a release.
    permissions:
      contents: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Get current date for release tag
        id: get_date
        run: echo "TAG=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Setup Python for build script
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r26b
          # NDK is not added to the system path to avoid potential conflicts.
          # Its path is exposed as an output and used via an environment variable.
          add-to-path: false

      - name: Run build script
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
          # Ensure platforms.txt has Unix line endings and create a comma-separated list
          export HY_APP_PLATFORMS=$(sed 's/\r$//' platforms.txt | awk '!/^#/ && !/^$/' | paste -sd ",")
          python hyperbole.py build -r

      - name: Generate hashes for build artifacts
        run: |
          # Change directory to 'build' to generate hashes with clean relative paths.
          # This also gracefully handles cases where the directory might be empty.
          if [ -d "build" ] && [ "$(ls -A build)" ]; then
            cd build
            sha256sum * > hashes.txt
          else
            echo "Build directory is empty or does not exist. Skipping hash generation."
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # Use the date generated in a previous step as the release tag.
          tag_name: ${{ steps.get_date.outputs.TAG }}
          # Set a descriptive name for the release.
          name: Release ${{ steps.get_date.outputs.TAG }}
          # Automatically generate release notes from recent commits.
          generate_release_notes: true
          # Specify the files to upload as release assets.
          files: build/*
